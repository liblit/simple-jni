////////////////////////////////////////////////////////////////////////
//
//  overall configuration
//

plugins {
  id 'application'
  id 'c'
  id 'edu.wpi.first.GradleJni' version '0.2.1'
}

mainClassName = 'Main'


////////////////////////////////////////////////////////////////////////
//
//  extra checker tasks to verify runnability in various contexts
//

class CheckedOutput extends Exec {
  CheckedOutput() {
    standardOutput = new ByteArrayOutputStream()
    doLast {
      assert standardOutput.toString() ==~ '(Picked up _JAVA_OPTIONS: .*\n)?before native call\ninside native call\nafter native call\n'
    }
    project.check.dependsOn this
  }

  void fromDist(AbstractArchiveTask distTask, Object distTreeBuilder) {
    dependsOn distTask
    doFirst {
      project.copy {
	from distTreeBuilder(distTask.archivePath)
	into temporaryDir
      }
    }
    def startScripts = project.startScripts
    commandLine "${temporaryDir}/${startScripts.applicationName}/${startScripts.executableDir}/${startScripts.applicationName}"
  }
}

task checkRun(type: CheckedOutput, dependsOn: classes) {
  commandLine './gradlew', '--quiet', 'run'
}

task checkRunInstallDist(type: CheckedOutput, dependsOn: installDist) {
  commandLine "${files(installDist).singleFile}/${startScripts.executableDir}/${startScripts.applicationName}"
}

task checkRunDistTar(type: CheckedOutput) {
  fromDist distTar, project.&tarTree
}

task checkRunDistZip(type: CheckedOutput) {
  fromDist distZip, project.&zipTree
}


////////////////////////////////////////////////////////////////////////
//
//  software model, including native compilation
//

model {
  components {
    inside(JniNativeLibrarySpec) {
      javaCompileTasks << compileJava
    }
  }

  tasks {
    run {
      // help JVM find native shared library
      def lib = $.binaries.insideSharedLibrary
      dependsOn lib
      systemProperty 'java.library.path', lib.sharedLibraryFile.parent
    }

    startScripts {
      // include native shared library in all distributions
      def lib = $.binaries.insideSharedLibrary
      dependsOn lib
      distributions.main.contents.from(lib.sharedLibraryFile) {
	into 'lib'
      }

      // help JVM find native shared library
      defaultJvmOpts = ['-Djava.library.path=@APP_HOME@/lib']
      doLast {
	unixScript.text = unixScript.text.replace('@APP_HOME@', '$APP_HOME')
	windowsScript.text = windowsScript.text.replace('@APP_HOME@', '%~dp0..')
      }
    }

    checkRun {
      dependsOn $.binaries.insideSharedLibrary
    }
  }
}
